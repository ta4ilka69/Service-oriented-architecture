openapi: 3.1.1
info:
  title: Grammy Service Endpoints - OpenAPI 3.1.1
  description: |-
    **OpenAPI** specification for **Laboratory work №1** of **Service-oriented architecture** at **ITMO-University**.

  contact:
    name: Roman Kobelev & Balin Artem
    url: https://github.com/ta4ilka69/Service-oriented-architecture

  license:
    name: The MIT License
    url: https://mit-license.org/

  version: 0.0.1

servers:
  - url: 'https://localhost:5252/api/v1/grammy'
    description: Helios

paths:
  /band/{band-id}/singles/add:
    post:
      summary: Add a single to the band
      description: Add a single to the band. Accepts a string in body

      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/SingleSchema'

      responses:
        '201':
          description: Created. Returns created object
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Single'

        '400':
          description: Bad Request - Invalid name parameter.
          $ref: './music.yaml#/components/responses/BadRequestInvalidInput'
        '404':
          $ref: './music.yaml#/components/responses/MusicBandNotFound'
        '422':
          $ref: './music.yaml#/components/responses/InvalidIdFormat'
        '500':
          $ref: './music.yaml#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          description: Returns error code and message in case of error
          content:
            application/xml:
              schema:
                $ref: './music.yaml#/components/schemas/Error'

      parameters:
        - name: band-id
          in: path
          description: ID of the band to add a single to
          required: true
          schema:
            $ref: './music.yaml#/components/schemas/MusicBandId'

  /band/{band-id}/participants/add:
    post:
      summary: Add a participant to the band
      description: Add a participant to the band

      responses:
        '201':
          description: Created. Returns new object
          content:
            application/xml:
              schema:
                $ref: './music.yaml#/components/schemas/MusicBandAllSchema'
        '400':
          description: Bad Request - Invalid name parameter.
          $ref: './music.yaml#/components/responses/BadRequestInvalidInput'
        '404':
          $ref: './music.yaml#/components/responses/MusicBandNotFound'
        '422':
          $ref: './music.yaml#/components/responses/InvalidIdFormat'
        '500':
          $ref: './music.yaml#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          description: Returns error code and message in case of error
          content:
            application/xml:
              schema:
                $ref: './music.yaml#/components/schemas/Error'

      parameters:
        - name: band-id
          in: path
          description: ID of the band to add a participant to
          required: true
          schema:
            $ref: './music.yaml#/components/schemas/MusicBandId'

      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ParticipantSchema'


components:
  schemas:
    Single:
      allOf:
        - $ref: './music.yaml#/components/schemas/Album'
      xml:
        name: single
    SingleSchema:
      type: object
      properties:
        name:
          type: string
          xml:
            name: name
      required:
        - name
    ParticipantSchema:
      type: object
      properties:
        name:
          description: Имя нового участника.
          type: string
          minLength: 1
      required:
        - name
    ServiceUnavailableError:
      allOf:
        - $ref: './music.yaml#/components/schemas/Error'
        - type: object
          properties:
            code:
              example: 503
            message:
              example: Service Unavailable
  responses:
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/ServiceUnavailableError'